scale_x_continuous(limits= c(0, 80), breaks = seq(0, 80, 10), labels = seq(0, 80, 10)) +
scale_y_continuous(limits= c(0, 80), breaks = seq(0, 80, 10), labels = seq(0, 80, 10)) +
coord_fixed(ratio = 1) +
theme_bw() +
theme(legend.title.align = 0.5,
panel.grid.minor  = element_blank(),
panel.grid.major = element_blank(),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black")) +
labs(title = 'MEGAMILLIONS\ndate results: {current_frame}',
x = "numbers (1st to 3d)",
y = "numbers (4th to 6th)",
color = "jackpot\n(millions)") +
transition_manual(date, cumulative = TRUE) +
ease_aes('bounce-in')
lott_b %>%
head(9) %>%
ggplot(aes(value.x, value.y, color = jackpot, size = megaplier)) +
geom_point(alpha = 0.7) +
# geom_line(size = 1) +
scale_size(range = c(1, 10), trans = "exp") +
scale_color_jcolors_contin(palette = "rainbow") +
scale_x_continuous(limits= c(0, 80), breaks = seq(0, 80, 10), labels = seq(0, 80, 10)) +
scale_y_continuous(limits= c(0, 80), breaks = seq(0, 80, 10), labels = seq(0, 80, 10)) +
coord_fixed(ratio = 1) +
theme_bw() +
theme(legend.title.align = 0.5,
panel.grid.minor  = element_blank(),
panel.grid.major = element_blank(),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black")) +
labs(title = 'MEGAMILLIONS\ndate results: {current_frame}',
x = "numbers (1st to 3d)",
y = "numbers (4th to 6th)",
color = "jackpot\n(millions)") +
transition_manual(date, cumulative = TRUE) +
ease_aes('cubic-in-out')
# We'll start with a static plot
p <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length)) +
geom_point()
anim <- p +
transition_states(Species,
transition_length = 2,
state_length = 1)
anim +
ease_aes(y = 'bounce-out') # Sets special ease for y aesthetic
lott_b %>%
head(9) %>%
ggplot(aes(value.x, value.y, color = jackpot, size = megaplier)) +
geom_point(alpha = 0.7) +
# geom_line(size = 1) +
scale_size(range = c(1, 10), trans = "exp") +
scale_color_jcolors_contin(palette = "rainbow") +
scale_x_continuous(limits= c(0, 80), breaks = seq(0, 80, 10), labels = seq(0, 80, 10)) +
scale_y_continuous(limits= c(0, 80), breaks = seq(0, 80, 10), labels = seq(0, 80, 10)) +
coord_fixed(ratio = 1) +
theme_bw() +
theme(legend.title.align = 0.5,
panel.grid.minor  = element_blank(),
panel.grid.major = element_blank(),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black")) +
labs(title = 'MEGAMILLIONS\ndate results: {current_frame}',
x = "numbers (1st to 3d)",
y = "numbers (4th to 6th)",
color = "jackpot\n(millions)") +
transition_manual(date, cumulative = TRUE, transition_length = 2,
state_length = 1)) +
lott_b %>%
head(9) %>%
ggplot(aes(value.x, value.y, color = jackpot, size = megaplier)) +
geom_point(alpha = 0.7) +
# geom_line(size = 1) +
scale_size(range = c(1, 10), trans = "exp") +
scale_color_jcolors_contin(palette = "rainbow") +
scale_x_continuous(limits= c(0, 80), breaks = seq(0, 80, 10), labels = seq(0, 80, 10)) +
scale_y_continuous(limits= c(0, 80), breaks = seq(0, 80, 10), labels = seq(0, 80, 10)) +
coord_fixed(ratio = 1) +
theme_bw() +
theme(legend.title.align = 0.5,
panel.grid.minor  = element_blank(),
panel.grid.major = element_blank(),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black")) +
labs(title = 'MEGAMILLIONS\ndate results: {current_frame}',
x = "numbers (1st to 3d)",
y = "numbers (4th to 6th)",
color = "jackpot\n(millions)") +
transition_manual(date, cumulative = TRUE, transition_length = 2,
state_length = 1) +
ease_aes(y = 'bounce-out')
lott_b %>%
head(9) %>%
ggplot(aes(value.x, value.y, color = jackpot, size = megaplier)) +
geom_point(alpha = 0.7) +
# geom_line(size = 1) +
scale_size(range = c(1, 10), trans = "exp") +
scale_color_jcolors_contin(palette = "rainbow") +
scale_x_continuous(limits= c(0, 80), breaks = seq(0, 80, 10), labels = seq(0, 80, 10)) +
scale_y_continuous(limits= c(0, 80), breaks = seq(0, 80, 10), labels = seq(0, 80, 10)) +
coord_fixed(ratio = 1) +
theme_bw() +
theme(legend.title.align = 0.5,
panel.grid.minor  = element_blank(),
panel.grid.major = element_blank(),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black")) +
labs(title = 'MEGAMILLIONS\ndate results: {current_frame}',
x = "numbers (1st to 3d)",
y = "numbers (4th to 6th)",
color = "jackpot\n(millions)") +
# transition_manual(date, cumulative = TRUE) +
transition_states(date,
transition_length = 2,
state_length = 1) +
ease_aes(y = 'bounce-out')
lott_b %>%
head(9) %>%
ggplot(aes(value.x, value.y, color = jackpot, size = megaplier)) +
geom_point(alpha = 0.7) +
scale_size(range = c(1, 10), trans = "exp") +
scale_color_jcolors_contin(palette = "rainbow") +
scale_x_continuous(limits= c(0, 80), breaks = seq(0, 80, 10), labels = seq(0, 80, 10)) +
scale_y_continuous(limits= c(0, 80), breaks = seq(0, 80, 10), labels = seq(0, 80, 10)) +
coord_fixed(ratio = 1) +
theme_bw() +
theme(legend.title.align = 0.5,
panel.grid.minor  = element_blank(),
panel.grid.major = element_blank(),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black")) +
labs(title = 'MEGAMILLIONS\ndate results: {current_frame}',
x = "numbers (1st to 3d)",
y = "numbers (4th to 6th)",
color = "jackpot\n(millions)") +
# transition_manual(date, cumulative = TRUE) +
transition_states(date,
transition_length = 2,
state_length = 1) +
ease_aes(y = 'bounce-out')
library(tidyverse)
library(rvest)
library(janitor)
library(jcolors)
library(lubridate)
library(gapminder)
library(gganimate)
library(glue)
lott <- readRDS("/Users/heverz/Documents/R_projects/rden/static/data/data_post6/lott.RDS")
# saveRDS(lott, "/Users/heverz/Documents/R_projects/rden/static/data/data_post6/lott.RDS")
xy_b <- lott %>%
gather(point, value, x1:x6) %>%
mutate(point2 = case_when(
str_detect(point, "(1|2|3)") ~ "x",
str_detect(point, "(4|5|6)") ~ "y"),
id = case_when(
str_detect(point, "(1|4)") ~ 1,
str_detect(point, "(2|5)") ~ 2,
str_detect(point, "(3|6)") ~ 3
)
) %>%
split.data.frame(.$point2)  #we split the dataframe based on xy
names(xy_b) <- c("x", "y")
lott_b <- xy_b$x %>%    # no we join them based on their biweek ID
select(-c(point, point2, jackpot, megaplier)) %>%
inner_join(xy_b$y, by = c("date", "id")) %>%
select(order(colnames(.))) %>%
select(-starts_with("p"))
lott_b %>%
summary()
lott_b %>%
head(9) %>%
ggplot(aes(value.x, value.y, color = jackpot, size = megaplier)) +
geom_point(alpha = 0.7) +
scale_size(range = c(1, 10), trans = "exp") +
scale_color_jcolors_contin(palette = "rainbow") +
scale_x_continuous(limits= c(0, 80), breaks = seq(0, 80, 10), labels = seq(0, 80, 10)) +
scale_y_continuous(limits= c(0, 80), breaks = seq(0, 80, 10), labels = seq(0, 80, 10)) +
coord_fixed(ratio = 1) +
theme_bw() +
theme(legend.title.align = 0.5,
panel.grid.minor  = element_blank(),
panel.grid.major = element_blank(),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black")) +
labs(title = 'MEGAMILLIONS\ndate results: {current_frame}',
x = "numbers (1st to 3d)",
y = "numbers (4th to 6th)",
color = "jackpot\n(millions)") +
# transition_manual(date, cumulative = TRUE) +
transition_states(date,
transition_length = 2,
state_length = 1) +
ease_aes(y = 'bounce-out')
lott_b %>%
head(9) %>%
ggplot(aes(value.x, value.y, color = jackpot, size = megaplier)) +
geom_point(alpha = 0.7) +
scale_size(range = c(1, 10), trans = "exp") +
scale_color_jcolors_contin(palette = "rainbow") +
scale_x_continuous(limits= c(0, 80), breaks = seq(0, 80, 10), labels = seq(0, 80, 10)) +
scale_y_continuous(limits= c(0, 80), breaks = seq(0, 80, 10), labels = seq(0, 80, 10)) +
coord_fixed(ratio = 1) +
theme_bw() +
theme(legend.title.align = 0.5,
panel.grid.minor  = element_blank(),
panel.grid.major = element_blank(),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black")) +
# labs(title = 'MEGAMILLIONS\ndate results: {current_frame}',
#     x = "numbers (1st to 3d)",
#     y = "numbers (4th to 6th)",
#     color = "jackpot\n(millions)") +
# transition_manual(date, cumulative = TRUE) +
transition_states(date,
transition_length = 2,
state_length = 1) +
ease_aes(y = 'bounce-out')
lott_b %>%
head(9) %>%
ggplot(aes(value.x, value.y, color = jackpot, size = megaplier)) +
geom_point(alpha = 0.7) +
scale_size(range = c(1, 10), trans = "exp") +
scale_color_jcolors_contin(palette = "rainbow") +
scale_x_continuous(limits= c(0, 80), breaks = seq(0, 80, 10), labels = seq(0, 80, 10)) +
scale_y_continuous(limits= c(0, 80), breaks = seq(0, 80, 10), labels = seq(0, 80, 10)) +
coord_fixed(ratio = 1) +
theme_bw() +
theme(legend.title.align = 0.5,
panel.grid.minor  = element_blank(),
panel.grid.major = element_blank(),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black")) +
# labs(title = 'MEGAMILLIONS\ndate results: {current_frame}',
#     x = "numbers (1st to 3d)",
#     y = "numbers (4th to 6th)",
#     color = "jackpot\n(millions)") +
# transition_manual(date, cumulative = TRUE) +
transition_states(date) +
ease_aes(y = 'elastic-out')
lott_poly %>%
mutate(all_dates = paste0(date.x, " & ", date.y)) %>%
ggplot(aes(value.x, value.y, fill = lott_colour)) +
geom_polygon() +
scale_fill_identity() +
theme_bw() +
theme(legend.title.align = 0.5,
panel.grid.minor  = element_blank(),
panel.grid.major = element_blank(),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black")) +
labs(title = 'MEGAMILLIONS\ndate results: {current_frame}',
x = "date1 numbers",
y = "date2 numbers") +
# transition_manual(all_dates, cumulative = TRUE)
transition_states(all_dates) +
easy_aes(y = "bounce-out") +
exit_shrink()
lott_poly %>%
mutate(all_dates = paste0(date.x, " & ", date.y)) %>%
ggplot(aes(value.x, value.y, fill = lott_colour)) +
geom_polygon() +
scale_fill_identity() +
theme_bw() +
theme(legend.title.align = 0.5,
panel.grid.minor  = element_blank(),
panel.grid.major = element_blank(),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black")) +
labs(title = 'MEGAMILLIONS\ndate results: {current_frame}',
x = "date1 numbers",
y = "date2 numbers") +
# transition_manual(all_dates, cumulative = TRUE)
transition_states(all_dates) +
ease_aes(y = "bounce-out") +
exit_shrink()
lott_poly %>%
mutate(all_dates = paste0(date.x, " & ", date.y)) %>%
ggplot(aes(value.x, value.y, fill = lott_colour)) +
geom_polygon() +
scale_fill_identity() +
theme_bw() +
theme(legend.title.align = 0.5,
panel.grid.minor  = element_blank(),
panel.grid.major = element_blank(),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black")) +
# labs(title = 'MEGAMILLIONS\ndate results: {current_frame}',
#     x = "date1 numbers",
#     y = "date2 numbers") +
# transition_manual(all_dates, cumulative = TRUE)
transition_states(all_dates) +
ease_aes(y = "bounce-out") +
exit_shrink()
lott_poly %>%
mutate(all_dates = paste0(date.x, " & ", date.y)) %>%
ggplot(aes(value.x, value.y, fill = lott_colour)) +
geom_polygon() +
scale_fill_identity() +
theme_bw() +
theme(legend.title.align = 0.5,
panel.grid.minor  = element_blank(),
panel.grid.major = element_blank(),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black")) +
# labs(title = 'MEGAMILLIONS\ndate results: {current_frame}',
#     x = "date1 numbers",
#     y = "date2 numbers") +
# transition_manual(all_dates, cumulative = TRUE)
transition_states(all_dates, transition_length = 2,
state_length = 1) +
ease_aes(y = "bounce-out") +
exit_shrink()
lott
min(lott$date)
lott_poly %>%
mutate(all_dates = paste0(date.x, " & ", date.y)) %>%
ggplot(aes(value.x, value.y, fill = lott_colour)) +
geom_polygon() +
scale_fill_identity() +
scale_x_continuous(limits= c(0, 80), breaks = seq(0, 80, 10), labels = seq(0, 80, 10)) +
scale_y_continuous(limits= c(0, 80), breaks = seq(0, 80, 10), labels = seq(0, 80, 10)) +
theme_bw() +
theme(legend.title.align = 0.5,
panel.grid.minor  = element_blank(),
panel.grid.major = element_blank(),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black")) +
labs(title = 'MEGAMILLIONS\ndate results: {current_frame}',
x = "date1 numbers",
y = "date2 numbers") +
transition_manual(all_dates, cumulative = TRUE)
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(1)
options(blogdown.generator.server = TRUE)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
options(blogdown.generator.server = TRUE)
blogdown:::serve_site()
options(blogdown.generator.server = TRUE)
blogdown:::serve_site()
library(tidyverse)
min(lott$date)
library(tidyverse)
library(rvest)
library(janitor)
library(jcolors)
library(lubridate)
library(gapminder)
library(gganimate)
library(glue)
lott <- readRDS("/Users/heverz/Documents/R_projects/rden/static/data/data_post6/lott.RDS")
# saveRDS(lott, "/Users/heverz/Documents/R_projects/rden/static/data/data_post6/lott.RDS")
extract_table <- function(url) {
# extract values
url  %>%
read_html() %>%
html_nodes(".text td") %>%
html_text() %>%  # is a vector  that needs to be cleaned up
{
.[. != ""] %>% # we remove empty cells
.[10:(length(.)-6)] # and some first values that are junk
}  %>%
{
tibble(
date = as.Date(str_subset(., "^[:alpha:]"),format = "%A, %B %d, %Y"),
jackpot = str_subset(., "^\\$"),
numbers = str_subset(., "^[:digit:]{2}\\s"),
megaplier = as.numeric(.[str_count(.) == 1])
)
} %>%
# all the the 6 extracted numbers are in one single cell:
# we need to separate them
separate(numbers, paste0("x", 1:6)) %>%
mutate_at(vars(starts_with("x")), as.numeric) %>%  #make them as numeric
mutate(jackpot = as.numeric(str_extract(jackpot,  "[0-9]{1,}"))) # remove word million from jackpot cells
}
pages <- 1:62 # pages >63  do not have a megaplier
urls <- paste0("https://www.usamega.com/mega-millions-history.asp?p=", pages)
lott <- map_dfr(urls, extract_table)
glimpse(lott)
glimpse(lott)
glimpse(lott_b)
options(blogdown.generator.server = TRUE)
blogdown:::serve_site()
# we need to have 6 values for the x and 6 for the y so we are going to take 2 extractions of numbers
xy_p <- lott %>%
mutate(biweek = rep(1:(nrow(.)/2), each = 2),  # we create a biweek ID (same ID for points of the same shape)
point_coord = rep(c("x", "y"), nrow(.)/2))  %>%  # xy, one extraction will be the x coordinate and one the y
gather(numb, value,x1:x6) %>%  # wide to long
split.data.frame(.$point_coord)  #we split the dataframe based on xy
library(tidyverse)
library(rvest)
library(janitor)
library(jcolors)
library(lubridate)
library(gapminder)
library(gganimate)
library(glue)
lott <- readRDS("/Users/heverz/Documents/R_projects/rden/static/data/data_post6/lott.RDS")
# saveRDS(lott, "/Users/heverz/Documents/R_projects/rden/static/data/data_post6/lott.RDS")
xy_b <- lott %>%
gather(numb, value, x1:x6) %>% # gather x1 to x6 numbers
# the first 3 numbers of each extraction will be X the other Y
mutate(point_coord = case_when(
str_detect(numb, "(1|2|3)") ~ "x",  # if the string is x1, x2, x3 than x
str_detect(numb, "(4|5|6)") ~ "y"), # if the string is y1, y2, y3 than y (I should have renamed columns before gathering)
id = case_when(
str_detect(numb, "(1|4)") ~ 1, # point one has the first number as X and the 4th as Y
str_detect(numb, "(2|5)") ~ 2,
str_detect(numb, "(3|6)") ~ 3
)
) %>%
split.data.frame(.$point_coord)  #we split the dataframe based on X and Y
names(xy_b) <- c("x", "y")
lott_b <- xy_b$x %>%    # now we join them based on their biweek ID
select(-c(numb, point_coord, jackpot, megaplier)) %>%
inner_join(xy_b$y, by = c("date", "id")) %>%
select(order(colnames(.))) %>%
select(-starts_with("p"))
glimpse(lott_b)
# we need to have 6 values for the x and 6 for the y so we are going to take 2 extractions of numbers
xy_p <- lott %>%
mutate(biweek = rep(1:(nrow(.)/2), each = 2),  # we create a biweek ID (same ID for points of the same shape)
point_coord = rep(c("x", "y"), nrow(.)/2))  %>%  # xy, one extraction will be the x coordinate and one the y
gather(numb, value,x1:x6) %>%  # wide to long
split.data.frame(.$point_coord)  #we split the dataframe based on xy
names(xy_p) <- c("x", "y")
# lott_cl <-
lott_poly <- xy_p$x %>%    # no we join them based on their biweek ID
select(-c(point_coord)) %>%
inner_join(xy_p$y, by = c("biweek", "point")) %>%
select(order(colnames(.)))
# we need to have 6 values for the x and 6 for the y so we are going to take 2 extractions of numbers
xy_p <- lott %>%
mutate(biweek = rep(1:(nrow(.)/2), each = 2),  # we create a biweek ID (same ID for points of the same shape)
point_coord = rep(c("x", "y"), nrow(.)/2))  %>%  # xy, one extraction will be the x coordinate and one the y
gather(numb, value,x1:x6) %>%  # wide to long
split.data.frame(.$point_coord)  #we split the dataframe based on xy
names(xy_p) <- c("x", "y")
# lott_cl <-
lott_poly <- xy_p$x %>%    # no we join them based on their biweek ID
select(-c(point_coord)) %>%
inner_join(xy_p$y, by = c("biweek", "point_coord")) %>%
select(order(colnames(.)))
# we need to have 6 values for the x and 6 for the y so we are going to take 2 extractions of numbers
xy_p <- lott %>%
mutate(biweek = rep(1:(nrow(.)/2), each = 2),  # we create a biweek ID (same ID for points of the same shape)
point_coord = rep(c("x", "y"), nrow(.)/2))  %>%  # xy, one extraction will be the x coordinate and one the y
gather(numb, value,x1:x6) %>%  # wide to long
split.data.frame(.$point_coord)  #we split the dataframe based on xy
names(xy_p) <- c("x", "y")
# lott_cl <-
lott_poly <- xy_p$x %>%    # no we join them based on their biweek ID
select(-c(point_coord)) %>%
inner_join(xy_p$y, by = c("biweek", "point_coord")) %>%
select(order(colnames(.)))
# we need to have 6 values for the x and 6 for the y so we are going to take 2 extractions of numbers
xy_p <- lott %>%
mutate(biweek = rep(1:(nrow(.)/2), each = 2),  # we create a biweek ID (same ID for points of the same shape)
point_coord = rep(c("x", "y"), nrow(.)/2))  %>%  # xy, one extraction will be the x coordinate and one the y
gather(numb, value,x1:x6) %>%  # wide to long
split.data.frame(.$point_coord)  #we split the dataframe based on xy
names(xy_p) <- c("x", "y")
# lott_cl <-
lott_poly <- xy_p$x %>%    # no we join them based on their biweek ID
# select(-c(point_coord)) %>%
inner_join(xy_p$y, by = c("biweek", "point_coord")) %>%
select(order(colnames(.)))
# and voilà
glimpse(lott_poly)
# we need to have 6 values for the x and 6 for the y so we are going to take 2 extractions of numbers
xy_p <- lott %>%
mutate(biweek = rep(1:(nrow(.)/2), each = 2),  # we create a biweek ID (same ID for points of the same shape)
point_coord = rep(c("x", "y"), nrow(.)/2))  %>%  # xy, one extraction will be the x coordinate and one the y
gather(numb, value, x1:x6) %>%  # wide to long
split.data.frame(.$point_coord)  #we split the dataframe based on xy
xy_p
# we need to have 6 values for the x and 6 for the y so we are going to take 2 extractions of numbers
xy_p <- lott %>%
mutate(biweek = rep(1:(nrow(.)/2), each = 2),  # we create a biweek ID (same ID for points of the same shape)
point_coord = rep(c("x", "y"), nrow(.)/2))  %>%  # xy, one extraction will be the x coordinate and one the y
gather(numb, value, x1:x6) %>%  # wide to long
split.data.frame(.$point_coord)  #we split the dataframe based on xy
names(xy_p) <- c("x", "y")
# lott_cl <-
lott_poly <- xy_p$x %>%    # no we join them based on their biweek ID
select(-c(point_coord)) %>%
inner_join(xy_p$y, by = c("biweek", "numb")) %>%
select(order(colnames(.)))
# and voilà
glimpse(lott_poly)
options(blogdown.generator.server = TRUE)
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
options(blogdown.generator.server = TRUE)
blogdown:::serve_site()
blogdown::build_site()
blogdown::build_site()
